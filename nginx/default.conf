# --- HTTP Server Block ---
server {
    listen 80;
    # server_name _; # Listen on all hostnames for port 80 (デフォルト)

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Optional: Redirect all HTTP traffic to HTTPS
    # location / {
    #     return 301 https://$host$request_uri;
    # }

    # If not redirecting:
    location / {
        add_header Content-Type text/plain;
        return 200 'Hello from HTTP server! Use HTTPS for full tests.\r\n';
    }

    # Allow getting cert via HTTP as well (convenience)
    location = /cert {
        alias /etc/nginx/ssl/nginx.crt;
        add_header Content-Type text/plain;
        # Ensure Nginx can read the file
    }
} # End of HTTP server block

# --- HTTPS Server Block ---
server {
    listen 443 ssl;        # Listen on 443 with SSL
    http2 on;              # Enable HTTP/2 explicitly
    # server_name _; # Listen on all hostnames for port 443 (デフォルト)

    # --- SSL Configuration ---
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # Optional: Add modern SSL settings if needed
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 1d;
    # ssl_session_tickets off;

    # --- Logging ---
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # --- Document Root ---
    root /usr/share/nginx/html; # For serving files from test-data mount

    # --- Basic Endpoint ---
    location = / {
        add_header Content-Type text/plain;
        return 200 'Hello from HTTPS server!\r\n';
    }

    # --- Test Endpoints ---

    location = /test/get {
        # Only allow GET method
        if ($request_method != GET) {
            return 405; # Method Not Allowed
        }
        add_header Content-Type text/plain;
        return 200 'GET OK\r\n';
    }

    location = /test/post {
        # Only allow POST method
        if ($request_method != POST) {
            return 405;
        }
        client_max_body_size 10m; # Set max allowed body size
        add_header Content-Type text/plain;
        # Corrected return statement - $request_body_size is not a standard variable
        # Use $content_length (header value) or just return the body
        return 200 "POST OK: Body received.\r\nRequest Body:\r\n$request_body\r\n";
    }

    location = /test/redirect/permanent {
        return 301 /test/redirect/target;
    }

    location = /test/redirect/temporary {
        return 302 /test/redirect/target;
    }

    location = /test/redirect/target {
        add_header Content-Type text/plain;
        return 200 'Redirect Target Reached\r\n';
    }

    location = /test/cookie/set {
        add_header Set-Cookie "sessionid=s_abc123; Path=/; Max-Age=3600; HttpOnly; SameSite=Lax";
        add_header Set-Cookie "userdata=u_test; Path=/test; Secure; SameSite=Lax";
        add_header Content-Type text/plain;
        return 200 'Cookies Set\r\n';
    }

    location = /test/cookie/check {
        add_header Content-Type text/plain;
        # Check if the cookie header contains the specific sessionid value
        if ($http_cookie ~* "sessionid=s_abc123") {
             return 200 "Cookie Check OK. Received Cookies: $http_cookie\r\n";
        }
        # If not found, return 400
        return 400 "Cookie Check Failed: Required cookie 'sessionid=s_abc123' not found. Received: $http_cookie\r\n";
    }

    location /test/auth/basic {
        auth_basic "Restricted Content - Basic Auth Required";
        auth_basic_user_file /etc/nginx/ssl/.htpasswd; # Path to password file
        # If authentication succeeds, process the request
        add_header Content-Type text/plain;
        return 200 "Basic Auth OK\r\n";
    }

    location = /test/error/404 {
        return 404; # Not Found
    }
    location = /test/error/500 {
        return 500; # Internal Server Error
    }
    location = /test/error/403 {
        return 403; # Forbidden
    }

    # Serve a potentially large file from the mounted test-data directory
    location = /test/large-response {
        # try_files looks for files relative to the root directive
        try_files /data/large_file.bin =404;
        # Suggest filename for download
        add_header Content-Disposition 'attachment; filename="large_file.bin"';
        # Set appropriate MIME type
        add_header Content-Type application/octet-stream;
    }

    # Endpoint to get the server's certificate text
    location = /cert {
        # Use alias to serve a file from outside the root directory
        alias /etc/nginx/ssl/nginx.crt;
        add_header Content-Type text/plain;
        # Ensure Nginx worker process has read permissions for this file
    }

    # Optional: Placeholder for delay testing (requires additional Nginx modules)
    # location /test/delay {
    #     # Example using echo module (needs installation)
    #     # echo_sleep 5; # Sleep for 5 seconds
    #     # echo "Response after 5 second delay.";
    #     return 501; # Not Implemented without extra modules
    # }

} # End of HTTPS server block