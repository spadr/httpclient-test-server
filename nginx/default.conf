# --- HTTP Server Block ---
server {
    listen 80;
    # server_name _; # Default: Listen on all hostnames for port 80

    # Define log format 'main' in http block if needed, or use default Nginx format
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn; # Log warnings, errors, and critical issues

    # Add a custom header to identify responses from this block
    add_header X-Server-Name "Raspi Test Server HTTP";

    # Optional: Redirect all HTTP traffic to HTTPS
    # location / {
    #     return 301 https://$host$request_uri;
    # }

    # If not redirecting, provide basic endpoints
    location / {
        add_header Content-Type text/plain;
        return 200 'Hello from HTTP server! Use HTTPS for full tests.\r\n';
    }

    # Allow getting cert via HTTP as well (convenience)
    location = /cert {
        # Serve the certificate file using alias
        alias /etc/nginx/ssl/nginx.crt;
        add_header Content-Type text/plain;
    }

    # Echo endpoint for HTTP (limited info)
    location /test/echo {
        add_header Content-Type text/plain;
        # Return basic request info available over HTTP
        return 200 "HTTP Request Echo:\nMethod: $request_method\nURI: $request_uri\nHost: $host\nUser-Agent: $http_user_agent\n";
    }

} # End of HTTP server block

# --- HTTPS Server Block ---
server {
    listen 443 ssl;        # Listen on 443 with SSL enabled
    http2 on;              # Enable HTTP/2 explicitly
    # server_name _; # Default: Listen on all hostnames for port 443

    # --- SSL Configuration ---
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # Optional: Add recommended modern SSL/TLS settings
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_prefer_server_ciphers off;
    # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 1d;
    # ssl_session_tickets off;
    # ssl_stapling on; # Requires resolver directive in http block
    # ssl_stapling_verify on; # Requires resolver directive in http block
    # ssl_trusted_certificate /etc/nginx/ssl/nginx.crt; # Path to cert or chain for stapling

    # --- Logging ---
    access_log /var/log/nginx/access.log; # Use default or defined 'main' format
    error_log /var/log/nginx/error.log warn; # Log warnings and above

    # --- Common settings for locations ---
    add_header X-Server-Name "Raspi Test Server HTTPS"; # Custom header

    # --- Document Root ---
    # Base directory for serving static files (used by try_files, index, etc.)
    root /usr/share/nginx/html;

    # --- Basic Endpoint ---
    location = / {
        add_header Content-Type text/plain;
        return 200 'Hello from HTTPS server!\r\n';
    }

    # --- Test Endpoints ---

    # --- HTTP Method Testing ---
    location = /test/get {
        # Only allow GET method
        if ($request_method != GET) {
            return 405; # Method Not Allowed
        }
        add_header Content-Type text/plain;
        return 200 'GET OK\r\n';
    }

    location = /test/post {
        # Only allow POST method
        if ($request_method != POST) {
            return 405;
        }
        client_max_body_size 10m; # Limit request body size
        add_header Content-Type text/plain;
        # Return confirmation and the received request body
        return 200 "POST OK: Body received.\r\nRequest Body:\r\n$request_body\r\n";
    }

    location = /test/put {
        # Only allow PUT method
        if ($request_method != PUT) {
            return 405;
        }
        client_max_body_size 10m;
        add_header Content-Type text/plain;
        # Indicate successful processing, optionally return body
        return 200 "PUT OK: Body processed.\r\nRequest Body:\r\n$request_body\r\n"; # Common responses: 200, 201, 204
    }

    location = /test/delete {
        # Only allow DELETE method
        if ($request_method != DELETE) {
            return 405;
        }
        add_header Content-Type text/plain;
        # Indicate successful deletion intent
        return 200 'DELETE OK: Resource targeted for deletion.\r\n'; # Common responses: 200, 202, 204
    }

    location = /test/patch {
        # Only allow PATCH method
        if ($request_method != PATCH) {
            return 405;
        }
        client_max_body_size 10m;
        add_header Content-Type text/plain;
        # Indicate successful patching, optionally return body
        return 200 "PATCH OK: Body processed.\r\nRequest Body:\r\n$request_body\r\n"; # Common responses: 200, 204
    }

    # HEAD is typically handled implicitly by Nginx based on GET logic.
    # Explicit definition only needed for specific HEAD-only headers or logic.

    location = /test/options {
        # Handle OPTIONS request explicitly
        if ($request_method = OPTIONS) {
            # Respond with allowed methods for this endpoint
            add_header Allow "GET, POST, PUT, DELETE, PATCH, OPTIONS";
            add_header Content-Length 0; # No body for OPTIONS
            return 204; # No Content status code is standard
        }
        # If method is not OPTIONS, return Method Not Allowed
        return 405;
    }

    # --- Redirect Testing ---
    location = /test/redirect/permanent {
        return 301 /test/redirect/target; # Permanent redirect (301)
    }

    location = /test/redirect/temporary {
        return 302 /test/redirect/target; # Temporary redirect (302)
    }

    # Relative path redirect example
    location = /test/redirect/relative {
        # Redirects relative to the current path segment
        # e.g., request to /a/b/test/redirect/relative redirects to /a/b/test/redirect/target
        return 302 ../redirect/target;
    }

    location = /test/redirect/target {
        # The final destination for redirects
        add_header Content-Type text/plain;
        return 200 'Redirect Target Reached\r\n';
    }

    # Redirect loop to test client's max redirect handling capability
    location = /test/redirect/loop1 {
        return 302 /test/redirect/loop2;
    }
    location = /test/redirect/loop2 {
        return 302 /test/redirect/loop1;
    }

    # --- Cookie Testing ---
    location = /test/cookie/set {
        # Set multiple cookies with various attributes
        add_header Set-Cookie "sessionid=s_abc123; Path=/; Max-Age=3600; HttpOnly; SameSite=Lax";
        add_header Set-Cookie "userdata=u_test; Path=/test/cookie; Secure; SameSite=Lax";
        add_header Content-Type text/plain;
        return 200 'Cookies Set\r\n';
    }

    location = /test/cookie/check {
        add_header Content-Type text/plain;
        # Check if the received Cookie header contains the specific sessionid
        if ($http_cookie ~* "sessionid=s_abc123") {
             # If found, return success and the received cookie header
             return 200 "Cookie Check OK. Received Cookies: $http_cookie\r\n";
        }
        # If not found, return error
        return 400 "Cookie Check Failed: Required cookie 'sessionid=s_abc123' not found. Received: $http_cookie\r\n";
    }

    # --- Authentication Testing ---
    # Basic Authentication endpoint
    location /test/auth/basic { # Use prefix match (not '=') to potentially match subpaths if needed
        auth_basic "Restricted Content - Basic Auth Required"; # Realm message shown to user
        auth_basic_user_file /etc/nginx/ssl/.htpasswd;    # Path to the password file
        # If authentication is successful, the request continues here:
        add_header Content-Type text/plain;
        return 200 "Basic Auth OK\r\n";
    }

    # Check for Bearer token in Authorization header
    location = /test/auth/bearer {
        add_header Content-Type text/plain;
        # Check if Authorization header starts with "Bearer " (case-insensitive regex)
        if ($http_authorization ~* "^Bearer\s+.+$") {
            # If matches, return success and the header value
            return 200 "Bearer Auth Header Received: $http_authorization\r\n";
        }
        # If header doesn't match, return 401 Unauthorized
        return 401 "Bearer Auth Header Missing or Malformed. Received: '$http_authorization'\r\n";
    }

    # --- Error Testing ---
    # Endpoints to return specific HTTP error codes
    location = /test/error/400 { return 400 'Bad Request Simulation\r\n'; } # Bad Request
    location = /test/error/401 { return 401 'Unauthorized Simulation\r\n'; } # Unauthorized
    location = /test/error/403 { return 403 'Forbidden Simulation\r\n'; } # Forbidden
    location = /test/error/404 { return 404 'Not Found Simulation\r\n'; } # Not Found
    location = /test/error/405 { return 405 'Method Not Allowed Simulation\r\n'; } # Method Not Allowed
    location = /test/error/500 { return 500 'Internal Server Error Simulation\r\n'; } # Internal Server Error
    location = /test/error/503 { return 503 'Service Unavailable Simulation\r\n'; } # Service Unavailable

    # --- Large Response ---
    # Serve a potentially large file from the mounted test-data volume
    location = /test/large-response {
        # Look for the file 'data/large_file.bin' relative to the 'root' directory
        try_files /data/large_file.bin =404; # Return 404 if file doesn't exist
        # Suggest a filename for download dialogs
        add_header Content-Disposition 'attachment; filename="large_file.bin"';
        # Set the MIME type for binary data
        add_header Content-Type application/octet-stream;
    }

    # --- Certificate Endpoint ---
    # Serve the server's public certificate file as plain text
    location = /cert {
        # Use alias to serve a specific file from outside the root path
        alias /etc/nginx/ssl/nginx.crt;
        add_header Content-Type text/plain;
    }

    # --- Echo Endpoint ---
    # Return details about the received HTTPS request
    location /test/echo { # Use prefix match to catch paths like /test/echo/subpath
        add_header Content-Type text/plain;
        # Construct a response body with various request details (修正箇所: 全体を一つの文字列に)
        return 200 "HTTPS Request Echo:\nMethod:       $request_method\nURI:          $request_uri\nQuery Args:   $args\nScheme:       $scheme\nHost Header:  $host\nRemote Addr:  $remote_addr\nUser-Agent:   $http_user_agent\nAuthorization: $http_authorization\nCookie:       $http_cookie\n\n--- Request Body ---\n$request_body\n";
    }

    # Requests starting with /api/ will be forwarded to the backend service
    location /api/ {
            # proxy_pass forwards the request to the backend container
            # Use the service name defined in docker-compose.yml and the backend's port
            # REMOVED Trailing slash:
            proxy_pass http://backend:5000;

            # Set headers to pass client information to the backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optional: Increase timeouts if backend takes long to respond
            # proxy_connect_timeout 60s;
            # proxy_send_timeout 60s;
            # proxy_read_timeout 60s;
    }

    # --- Placeholders requiring backend are now potentially handled ---
    location = /test/delay { rewrite ^/test/delay$ /api/delay/5 permanent; } # Example: Redirect /test/delay to /api/delay/5
    location = /test/chunked { proxy_pass http://backend:5000/api/chunked; }
    location = /test/multipart { proxy_pass http://backend:5000/api/multipart; }
    # mTLS still requires Nginx specific config, not just backend proxy

} # End of HTTPS server block